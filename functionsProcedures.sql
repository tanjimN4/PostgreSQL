/*
@Procedural Approach:
1. Language Support: Supports procedural languages like PL/pgSQL, PL/Perl, PL/Python, etc.
2. Complex Logic: Allows for complex logic using control structures like loops, conditionals, and exception handling.
3. Variable Support: Supports variable declarations and manipulation within the procedural code.
4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions, 

@Non-Procedural Approach:
1. Declarative Queries: Focuses on writing declarative SQL queries to retrieve, insert, update, or delete data from the database.
2. Simplicity: Emphasizes simplicity by expressing operations in terms of what data is needed.
3. SQL Functions: Supports SQL functions, which are single SQL statements that return a value or set of values.
4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.
*/

SELECT * from employees;

SELECT count(*) from employees;

CREATE Function emp_count()
RETURNS void
LANGUAGE SQL
as 
$$
  SELECT count(*) FROM employees;
$$

CREATE Function emp_delete(p_emp_id int)
RETURNS void
LANGUAGE SQL
as 
$$
--   SELECT count(*) FROM employees;
DELETE FROM employees WHERE employee_id =p_emp_id
$$

SELECT emp_count ()

SELECT emp_delete (29)

SELECT * FROM employees;

CREATE PROCEDURE remove_emp(p_emp_id INT)
LANGUAGE plpgsql
AS
$$
DECLARE
    test_var INT;
BEGIN
    SELECT employee_id INTO test_var FROM employees WHERE employee_id = p_emp_id;
    DELETE FROM employees WHERE employee_id = test_var;
    RAISE NOTICE 'Employee % deleted', p_emp_id;
END;
$$;


CALL remove_emp (27);